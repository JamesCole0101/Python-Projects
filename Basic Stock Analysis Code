import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import yfinance as yf
from scipy.stats import linregress

#Downloading data from Yahoo Finance
stock = "BP" #Changable here
ticker = yf.Ticker(stock)
data = yf.download(stock, start="2014-01-01", end="2024-12-31")
print(data.head())
df = pd.DataFrame({
    "Close": data["Close"].values.flatten(),
    "Volume": data["Volume"].values.flatten()
}, index=data.index)

#Retrieve and filter dividend data
dividends = ticker.dividends.loc["2014-01-01":"2024-12-31"]
print("Dividend Data \n", dividends)

#Normalise the dividend index to remove timezone
dividends.index = dividends.index.tz_localize(None)

#Add the dividends to the DataFrame where the dates match
df["Dividend"] = dividends.reindex(df.index).fillna(0)

#Dropping NaN values
df = df.dropna()

#Measuring BP returns against SPX
spx = yf.download("SPY", start="2014-01-01", end="2024-12-31")
df["SPX Return"] = spx["Close"].pct_change()
df[f"{stock} Return"] = df["Close"].pct_change()

#Data Clean
df = df.dropna()

#Regression Line
slope, intercept, r_value, p_value, std_err = linregress(df["SPX Return"], df[f"{stock} Return"])

#Defining offsets for cross overs
offset = 0.12 * df["Close"].max()

#Crossover Prices
short_window = 50
long_window = 200
df["Short MA"] = df["Close"].rolling(window=short_window).mean()
df["Long MA"] = df["Close"].rolling(window=long_window).mean()
df["Long Crossover"] = (df["Short MA"] > df["Long MA"]) & (df["Short MA"].shift(1) <= df["Long MA"].shift(1))
df["Short Crossover"] = (df["Short MA"] < df["Long MA"]) & (df["Short MA"].shift(1) >= df["Long MA"].shift(1))
df["Short MA"] = df["Close"].rolling(window=short_window).mean()
df["Long MA"] = df["Close"].rolling(window=long_window).mean()
plt.figure(figsize=(10, 8))

#Plotting closing price + MA
plt.subplot(2, 2, 1)
plt.plot(df.index, df["Close"], color="blue", label="Close Price")
plt.plot(df["Short MA"], label="Short MA", alpha=0.7, color="red")
plt.plot(df["Long MA"], label="Long MA", alpha=0.7, color="Green")
plt.scatter(df.index[df["Long Crossover"]], df["Close"][df["Long Crossover"]] - offset, marker="^", color="green", label="B-Crossover", zorder=5, alpha=1)
plt.scatter(df.index[df["Short Crossover"]], df["Close"][df["Short Crossover"]] + offset , marker="v", color="red", label="S-Crossover", zorder=5, alpha=1)
plt.title(f"{stock} Close Price")
plt.xlabel("Date")
plt.ylabel("Price")
plt.grid()
plt.legend()

#Plotting BP volume
plt.subplot(2, 2, 2)
plt.plot(df.index, df["Volume"], color="red", label="Volume")
plt.title(f"{stock} Volume")
plt.xlabel("Date")
plt.ylabel("Volume")
plt.grid()
plt.legend()

#Plotting returns of BP vs SPX(With Regression Line)
plt.subplot(2, 2, 3)
x = np.sort(df["SPX Return"].values)
y = slope * x + intercept
regression_line1 = [slope * x + intercept for x in df["SPX Return"]]
plt.scatter(df["SPX Return"], df[f"{stock} Return"], label=f"{stock} vs SPX Returns", color="blue", alpha=0.7)
plt.plot(x, y, label=f"Regression Line", color="orange")
plt.title(f"{stock} vs SPX Returns")
plt.xlabel("SPX Returns")
plt.ylabel(f"{stock} Returns")
plt.legend()
plt.grid()

#Plotting BP Dividend
plt.subplot(2, 2, 4)
plt.plot(df.index, df["Dividend"], color="green", label="Dividends")
plt.title(f"{stock} Dividends")
plt.xlabel("Date")
plt.ylabel("Dividends")
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()
